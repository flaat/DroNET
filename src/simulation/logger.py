from dataclasses import dataclass, field, fields, asdict
from typing import Union

from src.entities.events.event import Event
from src.entities.packets.packets import Packet, HelloPacket, ACKPacket
from src.entities.uavs.drone import Drone

import json


@dataclass
class Logger:
    control_packets: list = field(default_factory=list)

    # all the events generated during the simulation
    events: list = field(default_factory=list)

    # all events not listened due to move routing
    events_not_listened: list = field(default_factory=list)

    # all the packets generated by the drones, either delivered or not (union of all the buffers)
    drones_packets: list = field(default_factory=list)

    # all the packets notified to the depot
    drones_packets_to_depot: list = field(default_factory=list)

    def add_event(self, timestep: int, event: Event):
        """

        @param timestep:
        @param event:
        @return:
        """

        tuple_to_store = (timestep, event.identifier, event)

        self.events.append(tuple_to_store)

    def add_event_not_listened(self, timestep: int, event: Event):
        """

        @param timestep:
        @param event:
        @return:
        """

        tuple_to_store = (timestep, event.identifier, event)

        self.events_not_listened.append(tuple_to_store)

    def add_control_packet(self, timestep: int, packet: Union[HelloPacket, ACKPacket]):
        """

        @param timestep:
        @param packet:
        @return:
        """

        tuple_to_store = (
        timestep, packet.identifier, packet.event_ref, packet.source_drone, packet.destination_drone, packet)

        self.events.append(tuple_to_store)

    def add_drones_packet_to_depot(self, timestep: int, packet: Packet, source_drone: Drone):
        """

        @param source_drone:
        @param timestep:
        @param packet:
        @return:
        """

        tuple_to_store = (timestep, source_drone, packet)

        self.drones_packets_to_depot.append(tuple_to_store)

    def add_drones_packet(self, timestep: int, packet: Packet, source_drone: Drone):
        """

        @param source_drone:
        @param timestep:
        @param packet:
        @return:
        """

        tuple_to_store = (timestep, source_drone, packet)

        self.drones_packets.append(tuple_to_store)

    def __str__(self):
        return self.__repr__()

    def __repr__(self):
        cls = self.__class__
        cls_name = cls.__name__
        indent = ' ' * 4
        res = [f'Simulation {cls_name}(']

        for f in fields(cls):
            value = getattr(self, f.name)
            res.append(f'{indent}{f.name} = {value!r},')

        res.append(')')
        return '\n'.join(res)

    # TODO: plot del log condizionale?
    def write(self, path: str, filename: str):
        with open(f"{path}/{filename}", "w") as file:
            file.write(str(self))
